files = list.files('//nau.froot.nau.edu/cirrus/projects/above_gedi/lpuckett/ABoVE/ShovelCreek/USGS_Fairbanks_2017/0_download/')
QL2 = files[stringr::str_detect(files,'QL2')]
QL1 = files[stringr::str_detect(files,'QL1')]
## sanity check
length(files)==length(QL2) + length(QL1)
QL2
QL2[5000:6000]
file.size(QL2[1])
files = list.files('//nau.froot.nau.edu/cirrus/projects/above_gedi/lpuckett/ABoVE/ShovelCreek/USGS_Fairbanks_2017/0_download/', full.names = T)
QL2 = files[stringr::str_detect(files,'QL2')]
QL1 = files[stringr::str_detect(files,'QL1')]
size(QL2[1])
file.size(QL2[1])
total = 0 # size in bytes
for(filename in QL2){
total = total + file.size(QL2[1])*8e-9
}
total
total = 0 # size in bytes
for(filename in QL2){
total = total + file.size(QL2[1])
}
total
GB = total * 9.31Ã—10-10
GB = total * 9.31e-10
GB
total = 0 # size in bytes
for(filename in QL1){
total = total + file.size(QL2[1])
}
GB = total * 9.31e-10
GB
32/164
total = 0 # size in bytes
for(filename in files){
total = total + file.size(filename)
}
GB = total * 9.31e-10
GB
total = 0 # size in bytes
for(filename in QL2){
total = total + file.size(filename)
}
GB = total * 9.31e-10
GB
total = 0 # size in bytes
for(filename in QL1){
total = total + file.size(filename)
}
GB = total * 9.31e-10
GB
x1 = c(0, -5, 7, 4)
x2 = c(3, 2, 0, -10)
x3 = c(14, 30, 25, 28)
fx = function(x1, x2, x3){
return (2*x1 + 3*x2 - x3)}
y = fx(x1, x2, x3)
y
plot(x1, fx(x1, x2, x3))
x1[1]
const = function(x, j){
for(i in 1:length(x)){
x[i] = x[j]
}
return(x)
}
plot(x1, fx(x1, x2, x3))
plot(x1, fx(const(x1,1), x2, x3))
plot(x1, fx(const(x1,1), x2, x3))
lines(x1, fx(const(x1,2), x2, x3))
lines(x1, fx(const(x1,3), x2, x3))
lines(x1, fx(const(x1,4), x2, x3))
y = mean(y1,y2,y3,y4)
y1 = fx(const(x1,1), x2, x3)
y2 = fx(const(x1,2), x2, x3)
y3 = fx(const(x1,3), x2, x3)
y4 = fx(const(x1,4), x2, x3)
y = mean(y1,y2,y3,y4)
i = 1
y1 = mean(y1[i],y2[i],y3[i],y4[i])
i = 2
y2 = mean(y1[i],y2[i],y3[i],y4[i])
i = 3
y3 = mean(y1[i],y2[i],y3[i],y4[i])
i = 4
y4 = mean(y1[i],y2[i],y3[i],y4[i])
y = c(y1, y2, y3, y4)
y1 = fx(const(x1,1), x2, x3)
y2 = fx(const(x1,2), x2, x3)
y3 = fx(const(x1,3), x2, x3)
y4 = fx(const(x1,4), x2, x3)
i = 1
y1 = mean(y1[i],y2[i],y3[i],y4[i])
i = 2
y2 = mean(y1[i],y2[i],y3[i],y4[i])
i = 3
y3 = mean(y1[i],y2[i],y3[i],y4[i])
i = 4
y4 = mean(y1[i],y2[i],y3[i],y4[i])
y = c(y1, y2, y3, y4)
y4[i]
y1[i]
data = as.data.frame(x1, x2, x3)
data = as.data.frame(c(x1, x2, x3))
data
data = as.data.frame(cbind(x1, x2, x3))
data
x1 = c(0, -5, 7, 4)
x2 = c(3, 2, 0, -10)
x3 = c(14, 30, 25, 28)
data = as.data.frame(cbind(x1, x2, x3))
fx = function(data){
return (2*data$x1 + 3*data$x2 - data$x3)}
pd = function(data, col){
for(i in 1:length(data[,col]){
y = append(y, fx(const(data, col, i)))
}
}
plot(x1, fx(x1, x2, x3))
y1 = fx(const(x1,1), x2, x3)
y2 = fx(const(x1,2), x2, x3)
y3 = fx(const(x1,3), x2, x3)
y4 = fx(const(x1,4), x2, x3)
i = 1
y1 = mean(y1[i],y2[i],y3[i],y4[i])
i = 2
y2 = mean(y1[i],y2[i],y3[i],y4[i])
i = 3
y3 = mean(y1[i],y2[i],y3[i],y4[i])
i = 4
y4 = mean(y1[i],y2[i],y3[i],y4[i])
y = c(y1, y2, y3, y4)
pd = function(data, col){
pd = function(data, col){
y = NULL
for(i in 1:length(data[,col]){
y = append(y, fx(const(data, col, i)))
}
}
pd = function(data, col){
for(i in 1:length(data[,col]){
y = append(y, fx(const(data, col, i)))
}
return(y)
}
plot(x1, fx(x1, x2, x3))
y1 = fx(const(x1,1), x2, x3)
y2 = fx(const(x1,2), x2, x3)
y3 = fx(const(x1,3), x2, x3)
y4 = fx(const(x1,4), x2, x3)
i = 1
y1 = mean(y1[i],y2[i],y3[i],y4[i])
i = 2
y2 = mean(y1[i],y2[i],y3[i],y4[i])
i = 3
y3 = mean(y1[i],y2[i],y3[i],y4[i])
i = 4
y4 = mean(y1[i],y2[i],y3[i],y4[i])
y = c(y1, y2, y3, y4)
pd = function(data, col){
y = NULL
for(i in 1:length(data[,col]){
y = append(y, fx(const(data, col, i)))
}
return(y)
}
pd = function(data, col){
y = NULL
for(i in 1:length(data[,col])){
y = append(y, fx(const(data, col, i)))
}
return(y)
}
pd(data, 1)
fx(const(data, 1, 1,))
const(data,1,1)
const = function(data, col, row){
for(i in 1:length(data[,col])){
data[i,col] = data[row,col]
}
return(data)
}
pd = function(data, col){
y = NULL
for(i in 1:length(data[,col])){
y = append(y, fx(const(data, col, i)))
}
return(y)
}
pd(data, 1)
pd = function(data, col){
y = NULL
for(i in 1:length(data[,col])){
y = rbind(y, fx(const(data, col, i)))
}
return(y)
}
pd(data, 1)
pd = function(data, col){
y = NULL
for(i in 1:length(data[,col])){
y = rbind(y, fx(const(data, col, i)))
}
out = NULL
for(i in 1:ncol(data)){
out = append(out, mean(y[i]))
}
return(out)
}
pd(data, 1)
data
const(data,1,1)
const(data,1,2)
pd = function(data, col){
y = NULL
for(i in 1:length(data[,col])){
y = rbind(y, fx(const(data, col, i)))
print(y)
}
out = NULL
for(i in 1:ncol(data)){
out = append(out, mean(y[i]))
}
return(out)
}
pd(data, 1)
pd = function(data, col){
y = NULL
for(i in 1:length(data[,col])){
y = rbind(y, fx(const(data, col, i)))
print(y)
}
out = NULL
for(i in 1:nrow(data)){
out = append(out, mean(y[i]))
}
return(out)
}
pd(data, 1)
mean(-5, -15, 9, -5)
plot(x1, pd(data, 1))
plot(x2, pd(data, 2))
lm(x = x2, y = pd(data,1))
?lm
lm(data = as.data.frame(cbind(x1, pd(data,1)))
lm(data = as.data.frame(cbind(x1, pd(data,1))))
lm(data = as.data.frame(cbind(x2, pd(data,2))))
plot(x1, pd(data, 1))
-10+9-14
-10+6-30
-10-25
-10-30-28
?st_nn
?nngeo::st_nn
ABoVE_crs =  sp::CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs")
pts1 = spTransform(pts1_orig, ABoVE_crs)
pts2 = spTransform(pts2_orig, ABoVE_crs)
library(sp); library(sf)
library(sp); library(sf); library(nngeo);
ABoVE_crs =  sp::CRS("+proj=aea +lat_1=50 +lat_2=70 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs")
size = as.numeric(commandArgs(trailingOnly = T)[1])
print(paste0("size: ", size))
pts1 = st_read(dsn="/projects/above_gedi/users/lpuckett/ShovelCreek/LVISF2_ABoVE_2019/1a_points/WGS84/LVISF2_ABoVE2019_0722_R2003_075347.shp")
?cbind
?mutate_at
library(dplyr)
mutate_at
?mutate_at
?st_write
?st_nn
filepath = "C:/Users/lkp58/Downloads/gridMetric.above_fairbanks.x.0.y.51.metric.filt.txt"
data = read.table(filepath, skip = 0, header = FALSE)
View(data)
data = read.csv(filepath, skip = 0, header = FALSE)
?read.csv
data = read.csv(filepath, skip = 0, header = FALSE, skip=1)
data = read.csv(filepath, skip = 1, header = FALSE)
data = read.csv(filepath, header = TRUE)
projStr = sp::CRS("+proj=utm +zone=6 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")
cell_Centers = sp::SpatialPointsDataFrame(cbind(data$lon, data$lat), data, proj4string = projStr)
pixelCenters = sp::SpatialPointsDataFrame(cbind(data$lon, data$lat), data, proj4string = projStr)
rm(cell_Centers)
plot(pixelCenters[1:100])
plot(pixelCenters[1:100,])
raster::plot(pixelCenters)
points_extent = extent(pixelCenters)
pixelCenters = pixelCenters
new_extent[1] = points_extent[1]-res/2
new_extent[2] = points_extent[2]+res/2
new_extent[3] = points_extent[3]-res/2
new_extent[4] = points_extent[4]+res/2
points_extent = raster::extent(pixelCenters)
pixelCenters = pixelCenters
new_extent[1] = points_extent[1]-res/2
new_extent[2] = points_extent[2]+res/2
new_extent[3] = points_extent[3]-res/2
new_extent[4] = points_extent[4]+res/2
res = 20
pixelCenters = sp::SpatialPointsDataFrame(cbind(data$lon, data$lat), data, proj4string = projStr)
points_extent = raster::extent(pixelCenters)
pixelCenters = pixelCenters
new_extent[1] = points_extent[1]-res/2
new_extent[2] = points_extent[2]+res/2
new_extent[3] = points_extent[3]-res/2
new_extent[4] = points_extent[4]+res/2
pixelCenters = sp::SpatialPointsDataFrame(cbind(data$lon, data$lat), data, proj4string = projStr)
points_extent = raster::extent(pixelCenters)
new_extent = points_extent
new_extent[1] = points_extent[1]-res/2
new_extent[2] = points_extent[2]+res/2
new_extent[3] = points_extent[3]-res/2
new_extent[4] = points_extent[4]+res/2
plot(new_extent)
library(raster)
plot(new_extent)
plot(pixelCenters, add = T, col = 'red')
colnames(data)
# create a template, "r", for the raster
r <- raster::raster(crs = points@proj4string)
# create a template, "r", for the raster
r <- raster::raster(crs = pixelCenters@proj4string)
raster::extent(r) = new_extent
print(extent(r))
res(r) = c(res, res)
metrics = c("trueground","truetop","groundslope","ALScover","cover",
"rhReal0","rhReal20","rhReal40","rhReal60","rhReal80","rhReal98","rhReal100",
"gLAI0to10","gLAI10to20","gLAI20to30","gLAI30to40")
rast = NULL
for(metric in metrics){
print(metric)
rast_tmp <- raster::rasterize(x = pixelCenters,
y = r,
field = metric,
fun=function(x,...){mean(x, na.rm = T)})
# plot(rast_tmp)
if(is.null(rast)){
rast = rast_tmp
}else{
rast = raster::brick(rast_tmp, rast)
}
}
metrics = c("trueground","truetop","groundslope","ALScover","cover",
"rhReal0","rhReal20","rhReal40","rhReal60","rhReal80","rhReal98","rhReal100",
"gLAI0t10","gLAI10t20","gLAI20t30","gLAI30t40")
rast = NULL
for(metric in metrics){
print(metric)
rast_tmp <- raster::rasterize(x = pixelCenters,
y = r,
field = metric,
fun=function(x,...){mean(x, na.rm = T)})
# plot(rast_tmp)
if(is.null(rast)){
rast = rast_tmp
}else{
rast = raster::brick(rast_tmp, rast)
}
}
print(metrics)
print(rast)
names(rast) = metrics
plot(rast)
plot(rast$trueground)
data$trueground
metric = trueground
metric = "trueground"
rast_tmp <- raster::rasterize(x = pixelCenters,
y = r,
field = metric,
fun=function(x,...){mean(x, na.rm = T)})
plot(rast_tmp)
names(rast_tmp) = metric
rast_tmp
rast = NULL
for(metric in metrics){
print(metric)
rast_tmp <- raster::rasterize(x = pixelCenters,
y = r,
field = metric,
fun=function(x,...){mean(x, na.rm = T)})
names(rast_tmp) = metric
# plot(rast_tmp)
if(is.null(rast)){
rast = rast_tmp
}else{
rast = raster::brick(rast_tmp, rast)
}
}
print(metrics)
print(rast)
plot(rast$trueground)
plot(rast$trueground)
gsub('.','_',txt..f.f.f')
gsub('.','_','txt..f.f.f')
gsub('f','_','txt..f.f.f')
gsub('\\.','_','txt..f.f.f')
rast = NULL
for(metric in metrics){
print(metric)
rast_tmp <- raster::rasterize(x = pixelCenters,
y = r,
field = metric,
fun=function(x,...){mean(x, na.rm = T)})
names(rast_tmp) = metric
# plot(rast_tmp)
if(is.null(rast)){
rast = rast_tmp
}else{
rast = raster::brick(rast_tmp, rast)
}
}
print(metrics)
print(rast)
seq_along(35000,1)
seq_along(100)
seq_along(10000)
?seq_along
seq(from=1, to=350000, length.out = 35)
floor(seq(from=1, to=350000, length.out = 35))
indices = floor(seq(from=1, to=350000, length.out = 35))
indices = floor(seq(from=1, to=350000, by=1000))
indices
indices = floor(seq(from=1, to=350000, length.out = 300))
incidices
indices
arrayNum=2
indices[arrayNum]
list.files('//nau.froot.nau.edu/projects/')
list.files('\nau.froot.nau.edu\projects\')
list.files('\\nau.froot.nau.edu\projects\')
list.files('//nau.froot.nau.edu/cirrus/projects/')
list.files('//nau.froot.nau.edu/cirrus/projects/above_gedi/')
setwd('//nau.froot.nau.edu/cirrus/scratch/lkp58/icesat_Sierras/boundary/')
library(sp); library(rgdal)
xmin= -120.72
xmax= -120.27
ymin= 38.98
ymax= 39.34
coords = c(c(xmin, xmin, xmax, xmax),c(ymin, ymax, ymax, ymin))
Srl = NULL
x = c(xmax, xmax, xmin, xmin, xmax)
y = c(ymin, ymax, ymax, ymin, ymin)
poly = Polygon(coords = cbind(x, y))
Polygons_obj = Polygons(srl = c(poly), ID = as.numeric(i))
Srl = append(Polygons_obj, Srl)
Polygons_obj = Polygons(srl = c(poly), ID = as.numeric(1))
Srl = append(Polygons_obj, Srl)
Sr = SpatialPolygons(Srl = Srl, proj4string = sp::CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
spdf = SpatialPolygonsDataFrame(Sr = Sr, data = df, match.ID = T)
Sr
spdf = SpatialPolygonsDataFrame(Sr = Sr, data = df, match.ID = T)
spdf = SpatialPolygonsDataFrame(Sr = Sr, data = NA, match.ID = T)
spdf = SpatialPolygonsDataFrame(Sr = Sr, data = as.data.frame(NA), match.ID = T)
spdf@data = data.frame("X" = 1)
plot(spdf)
writeOGR(obj = spdf,
dsn = './boundary.shp',
layer = 'boundary',
overwrite_layer = T,
driver = 'ESRI Shapefile')
library(sp, verbose = FALSE)
library(dplyr, verbose = FALSE)
library(raster, verbose = FALSE)
library(rhdf5, verbose = FALSE)
install.packages('rhdf5')
